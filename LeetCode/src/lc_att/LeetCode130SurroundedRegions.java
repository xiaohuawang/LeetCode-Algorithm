package lc_att;

import java.util.LinkedList;

public class LeetCode130SurroundedRegions {
	
	char[][] board = { { 'X', 'X','X','X' }, { 'X','O', 'O','X' },{'X','X','O','X'},{'X','O','X','X'}};
	int count=0;
	
	public static void main(String[] args) {
		LeetCode130SurroundedRegions lc = new LeetCode130SurroundedRegions();

//		char[][] board = { { 'X', 'X','X','X' }, { 'X','O', 'O','X' },{'X','X','O','X'},{'X','O','X','X'}};
		lc.solve(lc.board);
		for (int i = 0; i < lc.board.length; i++) {
			for (int j = 0; j < lc.board[0].length; j++) {
				System.out.print(lc.board[i][j] + " ");
			}
			System.out.println(" ");
		}
	}

	  public void solve(char[][] board) {
	        if(board == null || board.length == 0) return;
	        // æŠŠå››å‘¨ä¸€åœˆçš„æ‰€æœ‰'O'æ ‡è®°æˆ?'X'ï¼Œè¿™äº›éƒ½æ˜¯ä¸?ç¬¦å?ˆæ?¡ä»¶çš„ï¼Œæœ€å?Žä¼šå?˜ä¼š'O'
	        for(int i=0; i< board.length; i++){
	            fill(board, i, 0);   //æ£€æŸ¥æ‰€æœ‰ç¬¬0åˆ—
	            fill(board, i, board[0].length-1); //æ£€æŸ¥æ‰€æœ‰æœ€å?Ž1åˆ—
	        }
	        for(int j=0; j<board[0].length; j++){
	            fill(board, 0, j);   //æ£€æŸ¥æ‰€æœ‰ç¬¬0è¡Œ
	            fill(board, board.length-1, j); //æ£€æŸ¥æ‰€æœ‰æœ€å?Ž1åˆ—
	        }
	        for(int i=0; i<board.length; i++){
	            for(int j=0; j<board[0].length; j++){
	                if(board[i][j] == 'O') board[i][j] = 'X';   //ä¸?åœ¨å?Œä¸€ç‰‡çš„'O'å¿…ç„¶æ˜¯è¢«'X'åŒ…å›´
	                else if(board[i][j] == 'X') board[i][j] = 'O';  //æ?¢å¤?ä¸?ç¬¦å?ˆæ?¡ä»¶çš„'O'
	            }
	        }
	    }
	    
	    //æŠŠå?Œä¸€ç‰‡çš„'O'å?˜æˆ?'X',ä½¿ç”¨ä¸€ä¸ªqueueæ?¥å?šBFS
	    public void fill(char[][] board, int i, int j){
	        count++;
	        System.out.println("count= "+count);
	    	if(board[i][j] != 'O') return;
	    	System.out.println("                 come");
	        board[i][j] = 'X';   //å°†æ‰€æœ‰'O'å?˜æˆ?'X'ï¼›
	        
	        LinkedList<Integer> queue = new LinkedList<Integer>();
	        int code = i * board[0].length + j;   //ç›¸å½“äºŽå°†æ ¼å­?ä¸€æ¬¡ç¼–å?·ï¼Œcodeå°±æ˜¯å?·ç ?ã€‚
	        System.out.println("                 code= "+code);
	        System.out.println("                 i= "+i);
	        System.out.println("                 j= "+j);
	        queue.offer(code);   //'X'æ”¾å…¥ä¸€ä¸ªqueue
	        
	        while(!queue.isEmpty()){
	            code = queue.poll();
	            int row = code / board[0].length;
	            int col = code % board[0].length;
	            //ç„¶å?Žæ£€æŸ¥ä¸Šä¸‹å·¦å?³ï¼Œå¼€å§‹flood fill
	            if(row > 0 && board[row-1][col] == 'O'){
	                queue.offer((row-1)*board[0].length + col);
	                board[row-1][col] = 'X';
	            }
	            if(row < board.length-1 && board[row+1][col] == 'O'){
	                queue.offer((row+1)*board[0].length + col);
	                board[row+1][col] = 'X';
	            }
	            if(col > 0 && board[row][col-1] == 'O'){
	                queue.offer((row)*board[0].length + col-1);
	                board[row][col-1] = 'X';
	            }
	            if(col < board[0].length-1 && board[row][col+1] == 'O'){
	                queue.offer((row)*board[0].length + col+1);
	                board[row][col+1] = 'X';
	            }            
	        }
	    }


	// private void solve(char[][] board) {
	// // TODO Auto-generated method stub
	//
	// }
}
